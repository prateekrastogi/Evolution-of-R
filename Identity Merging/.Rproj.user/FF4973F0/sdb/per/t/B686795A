{
    "contents" : "merge<-function(data)\n{\n  name<-data[,2]\n  aid<-data[,1]\n  email<-data[,3]\n # nmerge(name,aid)\n # emerge(email,aid)\n  nemerge(name,email,aid)\n}\n# name-name merging\nnmerge<-function(name,aid)\n{\n  #print(length(aid))\n # print(length(name))\n  #print(aid)\n  #print(name)\n  temporary<-(grep(\"NULL\",name))\n  tempx<-aid[temporary]\n  for(t in tempx)\n  {aid<-aid[aid!=t]} # some error due to which two elements are not removed from the vector at once so we have to use that\n  name<-name[name!=name[temporary]]\n  #print(aid)\n # print(name)\n  name<-tolower(name)\n  mhelper<-name\n  helperm<-aid\n  helpern<-NULL\n  helperaid<-NULL\n  if(length(name)>0)\n  {\n    for(i in (1:length(name)))\n{\n      nameparts<-(unlist(strsplit(name[i],\" \")))\n      posnames<-permn(nameparts)\n      index<-NULL\n      if(length(posnames)>0)\n      {\n        for(t in posnames)\n        {\n          \n          s1<-paste(t,collapse=\" \")\n          \n          if(length(mhelper)>0)\n       {   for(x in 1:length(mhelper))\n          {\n         fsim<-NULL\n         sim<-NULL\n         index<-x\n            parts<-(unlist(strsplit(mhelper[x],\" \")))\n            poss2<-permn(parts)\n       #  print(poss2)\n         if(length(poss2)>0)\n         {\n           for(j in  (1:length(poss2)))\n           {\n             tsim<-NULL\n             s2<-paste(poss2[[j]],collapse=\" \")\n            # print(s2)\n             tsim<-levenshteinSim(s1,s2)\n             if(length(tsim)>0)\n             {  \n               sim<-c(sim,tsim)\n             }\n           }\n         }\n      #  print(sim)\n        # print(\"bhad mein jaa\")\n        fsim<-max(sim)\n        # print(index)\n        # print(i)\n       #print(fsim)\n         if(length(fsim)>0)\n         {\n           if(fsim>.8)    # Please insert here levenshtein similiarity for appropriate merging.\n           {\n             if(i!=index)\n             {\n              # print(\"fuck\")\n              # print(fsim)\n             # print(aid[i])\n             #  print(aid[index])\n             # print(\"maa chuda\")\n              #print(name[i])\n              #print(mhelper[index])\n              # print(i)\n              # print(index)\n              # print(\"chal ja bc\")\n               dbwrite(aid[index],aid[i])\n             }\n           }   \n         }           \n         }}\n        }\n      }\n# print(index)\n #print(sim)\n            }\n      }\n    }\nemerge<-function(name,aid)\n{\n  #print(length(aid))\n  # print(length(name))\n  #print(aid)\n  #print(name)\n  temporary<-(grep(\"NULL\",name))\n  tempx<-aid[temporary]\n  for(t in tempx)\n  {aid<-aid[aid!=t]} # some error due to which two elements are not removed from the vector at once so we have to use that\n  name<-name[name!=name[temporary]]\n  xname<-name\n  name<-NULL\n  for(t in xname)\n  {\n    temp<-(unlist(strsplit(t,\"@\"))[1])\n    temp2<-unlist(strsplit(temp,\"<|!|>|[|]|$|%|&|(|\\\\^|\\\\+|\\\\-|)|,|\\\\.|\"))\n    temp3<-paste(temp2,collapse=\" \")\n    name<-c(name,temp3)\n  }\n  #print(aid)\n  # print(name)\n  name<-tolower(name)\n  mhelper<-name\n  helperm<-aid\n  helpern<-NULL\n  helperaid<-NULL\n  if(length(name)>0)\n  {\n    for(i in (1:length(name)))\n    {\n      nameparts<-(unlist(strsplit(name[i],\" \")))\n      posnames<-permn(nameparts)\n      index<-NULL\n      if(length(posnames)>0)\n      {\n        for(t in posnames)\n        {\n          \n          s1<-paste(t,collapse=\" \")\n          \n          if(length(mhelper)>0)\n          {   for(x in 1:length(mhelper))\n          {\n            fsim<-NULL\n            sim<-NULL\n            index<-x\n            parts<-(unlist(strsplit(mhelper[x],\" \")))\n            poss2<-permn(parts)\n            #  print(poss2)\n            if(length(poss2)>0)\n            {\n              for(j in  (1:length(poss2)))\n              {\n                tsim<-NULL\n                s2<-paste(poss2[[j]],collapse=\" \")\n                # print(s2)\n                tsim<-levenshteinSim(s1,s2)\n                if(length(tsim)>0)\n                {  \n                  sim<-c(sim,tsim)\n                }\n              }\n            }\n            #  print(sim)\n            # print(\"bhad mein jaa\")\n            fsim<-max(sim)\n            # print(index)\n            # print(i)\n            #print(fsim)\n            if(length(fsim)>0)\n            {\n              if(fsim>.8)    # Please insert here levenshtein similiarity for appropriate merging.\n              {\n                if(i!=index)\n                {\n                  #print(\"fuck\")\n                  #print(fsim)\n                  #print(aid[i])\n                  #print(aid[index])\n                  #print(\"maa chuda\")\n                  #print(name[i])\n                  #print(mhelper[index])\n                  # print(i)\n                  # print(index)\n                  # print(\"mother fucker\")\n                  dbwrite(aid[index],aid[i])\n                }\n              }   \n            }           \n          }}\n        }\n      }\n      # print(index)\n      #print(sim)\n    }\n  }\n}\nnemerge<-function(name,email,aid)\n{\n  tpass1<-grep(\"NULL\",name)\n  fname<-name[name!=name[tpass1]]\n  naid<-aid\n  for(x in tpass1)\n  {\n    naid<-naid[naid!=x]\n  }\n  #print(fname)\n # print(naid)\n # print(tpass)\n  eaid<-aid\n  tpass2<-grep(\"NULL\",email)\n  femail<-email[email!=email[tpass2]]\n  for(x in tpass2)\n  {\n    eaid<-eaid[eaid!=x]\n  }\n  femail<-tolower(femail)\n  fname<-tolower(fname)\n  if(length(fname)>0)\n { for(j in (1:length(fname)))\n  {\n   aut<-fname[j]\n    author<-unlist(strsplit(aut,\" \"))\n    posid<-gpe(author)\n    # for p.rastogi and r.prateek type emailids\n    for(parts in author)\n    {\n      timepass<-author[author!=parts]\n      timepass<-c(timepass,unlist(strsplit(parts,\"\"))[1])\n      temp<-gpe(timepass)\n      posid<-c(posid,temp)\n    }\n   if(length(femail)>0)\n   {\n     for(k in 1:length(femail))\n     {\n       tempemail<-(unlist(strsplit(femail[k],\"@\"))[1])\n       aid1<-naid[j]\n       aid2<-eaid[k]\n       #print(aid1)\n       #print(aid2)\n       #print(tempemail)\n       result<-F\n       result2<-F\n       result<-neperfect(tempemail,posid)\n       if(length(result)==0)\n       {\n         result<-F\n       }\n       # i.e. if perfect merge occurs then write the merge on to the database\n       if(result==T)\n       {\n        # print(aid1)\n         #print(aid2)\n        # print(fname[j])\n         #print(femail[k])\n        # print(\"here\")\n         dbwrite(aid1,aid2)\n       }\n       # try levenshtein similiarity merging\n       else\n       {\n        # print(fname[j])\n        # print(\"here\")\n         result2<-neapprox(tempemail,fname[j])\n       }\n       #i.e. if levenshtein merging occurs then write merge on the database\n       if(length(result2)==0)\n       {\n         result2<-F\n       }\n       if(result2==T)\n       {\n         #print(\"here\")\n         dbwrite(aid1,aid2)\n       }\n     }\n   }\n    #print(posid)\n  }}#red line\n  # print(eaid)\n  # print(femail)\n}\n",
    "created" : 1373584024808.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "1|1|8|0|\n11|1|98|4|\n100|1|196|0|\n113|3|118|2|\n113|3|118|2|\n198|1|282|0|\n268|8|270|7|\n268|8|270|7|\n",
    "hash" : "1292708993",
    "id" : "B686795A",
    "lastKnownWriteTime" : 1373901323,
    "path" : "E:/R/Identity Merging/R/IdMerge.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : true,
    "type" : "r_source"
}