{
    "contents" : "start<-function()\n{\n  library(RODBC)\n  library(combinat)\n  library(RecordLinkage)\n data<-getdata()\n  merge(data)\n}\nintdb<-function()\n{\n  channel<-odbcConnect('r',uid=\"root\",pwd=\"root\")\n  sqlQuery(channel,\"use finaldb;\")\n  return(channel)\n}\nclosedb<-function()\n{\n  odbcCloseAll()\n}\ngetdata<-function()\n{\n  channel<-intdb()\n  data<-sqlFetch(channel,'persons',rownames=F,colnames=F)\n  closedb()\n  return(data)\n}\ndbwrite<-function(aid1,aid2)\n{\n  channel<-intdb()\n  dma<-sqlFetch(channel,'mergedauthors',colnames=F,rownames=F)\n  dmid<-sqlFetch(channel,'mergedid',colnames=F,rownames=F)[,1]\n  mids<-dma[,1]\n  mid<-c(1)\n  aids<-dma[,2]\n  #print((dmid+2))\n  if(length(aids)>0)\n  {\n    test1<-match(aid1,aids,nomatch=-1)\n    test2<-match(aid2,aids,nomatch=-1)\n   #if match is found i.e. one of the id is already merged with someother id\n    if(test1!=-1 || test2!=-1)\n    {\n      #print(\"here\")\n      tempmid1<-NULL\n      tempmid2<-NULL\n      # getting the earlier merged id of the table\n      if(test1!=-1)\n      {\n        tempmid1<-mids[test1]\n      }\n     if(test2!=-1)\n      {\n        tempmid2<-mids[test2]\n      }\n      # if one of them is not merged but other is merged. Using length instead of values due to failure of if else to evaluate NULL values.\n      if(length(tempmid1)!=0 && length(tempmid2)==0 )\n      {\n        #print(\"having fun here\")\n        mid<-tempmid1\n        dfma2<-data.frame(mid,aid2)\n        names(dfma2)<-c(\"mergeid\",\"aid\")\n        try(sqlSave(channel,dfma2,tablename='mergedauthors',append=T,rownames=F,colnames=F))\n      }\n      # if one of them is not merged but other is merged\n      if(length(tempmid2)!=0 && length(tempmid1)==0)\n      {\n      #  print(\"i am here\")\n        mid<-tempmid2\n        dfma<-data.frame(mid,aid1)\n        names(dfma)<-c(\"mergeid\",\"aid\")\n        try(sqlSave(channel,dfma,tablename='mergedauthors',append=T,rownames=F,colnames=F))\n      }\n      #if both are merged\n      if(length(tempmid1)!=0 && length(tempmid2)!=0)\n      {\n        # if both are same then do nothing\n        if(tempmid1==tempmid2)\n        {\n          #print(\"here\")\n        }\n        # Here we can either update mergedid of either tempmid1 or tempid2. I am selecting tempmid1. \n        else\n        {\n          #print(\"yaha hu\")\n          tdta<-sqlFetch(channel,'mergedauthors',colnames=F,rownames=F)\n          tdta[,1][grep(tempmid1,tdta[,1])]<-tempmid2 # assigning tempmid2 to all the tempmid1\n          sqlUpdate(channel,tdta,tablename='mergedauthors',index='aid')\n        }\n      }\n      \n    }\n    # if no match is found i.e neither of them has been previously merged\n    else\n    {\n      #print(\"here\")\n      tempmid1<-(max(mids)+1)\n      mid<-tempmid1\n      dfma<-data.frame(mid,aid1)\n      dfma2<-data.frame(mid,aid2)\n      dfmid<-data.frame(mid)\n      names(dfmid)<-c(\"idmergedid\")\n      names(dfma)<-c(\"mergeid\",\"aid\")\n      names(dfma2)<-c(\"mergeid\",\"aid\")\n      try(sqlSave(channel,dfmid,tablename='mergedid',append=T,rownames=F,colnames=F))\n      try(sqlSave(channel,dfma,tablename='mergedauthors',append=T,rownames=F,colnames=F))\n      try(sqlSave(channel,dfma2,tablename='mergedauthors',append=T,rownames=F,colnames=F))\n    }\n    #print(test1)\n    #print(test2)\n  }\n  # if no previous entries are in the table\n  else{\n   # print(\"here\")\n    if(length(dmid)>0)\n    {\n      mid<-(max(dmid)+1)\n    }\n    dfma<-data.frame(mid,aid1)\n    dfma2<-data.frame(mid,aid2)\n    dfmid<-data.frame(mid)\n    names(dfmid)<-c(\"idmergedid\")\n    names(dfma)<-c(\"mergeid\",\"aid\")\n    names(dfma2)<-c(\"mergeid\",\"aid\")\n    try(sqlSave(channel,dfmid,tablename='mergedid',append=T,rownames=F,colnames=F))\n    try(sqlSave(channel,dfma,tablename='mergedauthors',append=T,rownames=F,colnames=F,fast=F))\n    try(sqlSave(channel,dfma2,tablename='mergedauthors',append=T,rownames=F,colnames=F,fast=F))\n  }\n  closedb()\n}\ngpe<-function(author)\n{\n  list<-permn(author)\n  posid<-NULL\n  if(length(list)>0)\n  {\n    for(t in (1:length(list)))\n    {\n      posid<-c(posid,paste(list[[t]],collapse=\".\"))\n      posid<-c(posid,paste(list[[t]],collapse=\" \"))\n      posid<-c(posid,paste(list[[t]],collapse=\"+\"))\n      posid<-c(posid,paste(list[[t]],collapse=\"-\"))\n      posid<-c(posid,paste(list[[t]],collapse=\"_\"))\n    }\n  }\n  return(posid)\n}\nneperfect<-function(email,posid)\n{\n  #print(\"here\")\n  normail<-email\n  if(length(normail)>0)\n  {#print(posid)\n    #print(normail[i])\n    for(i in (1:length(normail)))\n    {\n      #print(normail[i])\n      #print(email[i])\n      # print(tposid)\n      # tposid<-NULL\n      #print(posid)\n      test<-(setdiff(normail[i],setdiff(normail[i],posid)))\n      # print(posid)\n      \n      # print(normail[i])\n      \n      if(length(test)>0)\n      {\n       return(TRUE)\n      }\n      else\n      {\n        return(FALSE)\n      }\n    }\n  }\n  \n}\nneapprox<-function(email,name)\n{\n  # print(\"in nmapprox\")\n  temail<-email\n  lst<-NULL\n  #print(temail)\n  for(t in temail)\n  {\n    temp<-unlist(strsplit(t,\"@\"))[1]\n    temp2<-unlist(strsplit(temp,\"<|!|>|[|]|$|%|&|(|\\\\^|\\\\+|\\\\-|)|,|\\\\.| \"))\n    temp2<-gsub(\"<|!|>|[|]|$|%|&|(|\\\\^|\\\\+|\\\\-|)|,|\\\\.| \",\"\",temp2)\n    lst<-permn(temp2)\n  # print(length(list))\n    #print(temp2)\n    output<-F\n    if(length(lst)>0)\n    {\n      #z<-length(lst)\n      #print(\"here\")\n      for(t in (1:length(lst)))\n      {\n        \n        #print(\"in loop\")\n       # print(lst)\n       p<-lst[[t]]\n        comparator<-(paste(p,collapse=\" \"))\n       #print(comparator)\n       # print(name)\n        sim<-levenshteinSim(name,comparator)\n      # print(sim)\n        \n        #print(email)\n        # print(t)\n        # print(email)\n        # print(aut)\n        if(sim>.7)   ####### threshold if crossed\n        {\n         output<-T\n        }\n      }\n    }\n    return(output)\n  }\n}\n",
    "created" : 1373581583615.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "1|1|7|0|\n9|1|13|0|\n15|1|17|0|\n19|1|24|0|\n26|1|127|0|\n55|7|61|6|\n64|7|70|6|\n76|9|78|8|\n81|9|86|8|\n92|5|105|4|\n110|7|125|2|\n55|7|61|6|\n64|7|70|6|\n76|9|78|8|\n81|9|86|8|\n92|5|105|4|\n110|7|125|2|\n129|1|144|0|\n146|1|175|0|\n177|1|219|0|\n",
    "hash" : "598493157",
    "id" : "E87B1300",
    "lastKnownWriteTime" : 1373901323,
    "path" : "E:/R/Identity Merging/R/Identity Merging.R",
    "properties" : {
    },
    "source_on_save" : true,
    "type" : "r_source"
}