{
    "contents" : "#first frame to be inserted to database is pkgname because pkgname is the foreign key for package\ndframepkgname<- function(fvector)\n{\n  channel<-intdb()\n  t<-package(fvector)\n  temp<-sqlFetch(channel,'pkgname',colnames=F,rownames=F)[,1]\n  #when no entry in the database\n  if(length(temp)==0)\n  {\n    if(length(t)>0) #because package name may not be present in the description file\n  {  data<-data.frame(c(1),t,stringsAsFactors=F)\n    names(data)<-c(\"idpkgname\",\"pkgname\")\n    try(sqlSave(channel,data,tablename='pkgname',append=T,rownames=F,colnames=F))\n    \n  }}\n  #when database is filled with some entries\n  else\n  {\n   if(length(t)>0)\n   {\n    x<-sqlFetch(channel,'pkgname',colnames=F,rownames=F)[,2]\n    if(any(grepl(t,x))==F)  # if any package name that is found is already present in the database or not \n    {\n      data<-data.frame(c(max(sqlFetch(channel,'pkgname',colnames=F,rownames=F)[,1])+1),t,stringsAsFactors=F)\n      names(data)<-c(\"idpkgname\",\"pkgname\")\n      try(sqlSave(channel,data,tablename='pkgname',append=T,rownames=F,colnames=F))\n      \n    }\n   }\n  }\n  #print(sqlQuery(channel,\"desc pkgname;\"))\n  closedb()\n}\n# to initialize the database connection to our desired database\nintdb<-function()\n{ \n  channel<- odbcConnect('r',uid=\"root\",pwd=\"root\")\n  sqlQuery(channel,\"use finaldb;\")\n  return(channel)\n}\n# to close database connection\nclosedb <-function()\n{\n  odbcCloseAll()\n}\n#frame to be inserted to the package table of the database \ndframepackage<-function(fvector)\n{\n  channel<-intdb()\n  t<-package(fvector)\n  if(length(t)>0)\n  {\n    x<-sqlFetch(channel,'pkgname',colnames=F,rownames=F)\n    if(any(grepl(t,x[,2]))==T)  #checking whether pkgname is already present or not\n    {\n      temp<-sqlFetch(channel,'package',colnames=F,rownames=F)[,1]\n      #name vector for naming columns of dataframe\n      name<-c(\"pkgid\",\"pkgnameid\",\"priority\",\"version\",\"date\",\"title\",\"author\",\"maintainer\",\"description\",\"license\",\"url\",\"packaged\",\"ar\",\"encoding\",\"copyright\",\"sysreq\",\"revision\",\"bug\",\"biocviews\",\"bundledes\",\"collate\",\"collatewin\",\"collateunix\",\"keepsrc\",\"lazydata\",\"lazyload\",\"bytecompile\",\"zipdata\",\"biarch\",\"buildvignettes\",\"vignettebuilder\",\"needscompilation\",\"os\",\"ACM\",\"JEL\",\"MSC\",\"language\",\"built\",\"note\",\"contact\",\"mailinglist\",\"repo\",\"publication\",\"architecture\",\"contains\",\"type\")\n     #pkgid(integer)\n      pkgid<-NULL\n      if(length(temp)==0)\n      {\n        pkgid<-c(1)\n      }\n      else\n      {\n        pkgid<-c(max(temp)+1)\n      }\n      #pkgnameid(integer)\n    pkgnameid<-x[,1][grep(t,x[,2])]   #find package name index from second column and then find the corresponding pkgnameindex\n      #Priority\n      pkgpriority<-NULL\n      if(length(priority(fvector))>0)\n      {\n        pkgpriority<-priority(fvector)[1]\n      }\n      else\n      {\n        pkgpriority<-c(\"NULL\")\n      }\n      #version\n      pkgversion<-NULL\n      if(length(version(fvector))>0)\n      {\n        pkgversion<-version(fvector)[1]\n      }\n      else\n      {\n        pkgversion<-c(\"NULL\")\n      }\n      #date\n      pkgdate<-NULL\n      if(length(date(fvector))>0)\n      {\n        pkgdate<-date(fvector)[1]\n      }\n      else\n      {\n        pkgdate<-c(\"NULL\")\n      }\n      #title\n      pkgtitle<-NULL\n      if(length(title(fvector))>0)\n      {\n        pkgtitle<-title(fvector)[1]\n      }\n      else\n      {\n        pkgtitle<-c(\"NULL\")\n      }\n      #author\n      pkgauthor<-NULL\n      if(length(author(fvector))>0)\n      {\n        pkgauthor<-author(fvector)[1]\n      }\n      else\n      {\n        pkgauthor<-c(\"NULL\")\n      }\n      #maintainer\n      pkgmaintainer<-NULL\n      if(length(maintainer(fvector))>0)\n      {\n        pkgmaintainer<-maintainer(fvector)[1]\n      }\n      else\n      {\n        pkgmaintainer<-c(\"NULL\")\n      }\n      #description\n      pkgdescription<-NULL\n      if(length(description(fvector))>0)\n      {\n        pkgdescription<-description(fvector)[1]\n      }\n      else\n      {\n        pkgdescription<-c(\"NULL\")\n      }\n      #License\n      pkglicense<-NULL\n      if(length(license(fvector))>0)\n      {\n        pkglicense<-license(fvector)[1]\n      }\n      else\n      {\n        pkglicense<-c(\"NULL\")\n      }\n      #url\n      pkgurl<-NULL\n      if(length(url(fvector))>0)\n      {\n        pkgurl<-url(fvector)[1]\n      }\n      else\n      {\n        pkgurl<-c(\"NULL\")\n      }\n      #10 packaged\n      pkgpackaged<-NULL\n      if(length(packaged(fvector))>0)\n      {\n        pkgpackaged<-packaged(fvector)[1]\n      }\n      else\n      {\n        pkgpackaged<-c(\"NULL\")\n      }\n      #11 authors@r\n      pkgar<-NULL\n      if(length(authorsatr(fvector))>0)\n      {\n        pkgar<-authorsatr(fvector)[1]\n      }\n      else\n      {\n        pkgar<-c(\"NULL\")\n      }\n      #12 encoding\n      pkgencoding<-NULL\n      if(length(encoding(fvector))>0)\n      {\n        pkgencoding<-encoding(fvector)[1]\n      }\n      else\n      {\n        pkgencoding<-c(\"NULL\")\n      }\n      #13 copyright\n      pkgcopyright<-NULL\n      if(length(copyright(fvector))>0)\n      {\n        pkgcopyright<-copyright(fvector)[1]\n      }\n      else\n      {\n        pkgcopyright<-c(\"NULL\")\n      }\n      #14 sysreq\n      pkgsysreq<-NULL\n      if(length(sysreq(fvector))>0)\n      {\n        pkgsysreq<-sysreq(fvector)[1]\n      }\n      else\n      {\n        pkgsysreq<-c(\"NULL\")\n      }\n      #15 revision\n      pkgrevision<-NULL\n      if(length(revision(fvector))>0)\n      {\n        pkgrevision<-revision(fvector)[1]\n      }\n      else\n      {\n        pkgrevision<-c(\"NULL\")\n      }\n      #16 bug\n      pkgbug<-NULL\n      if(length(bugreports(fvector))>0)\n      {\n        pkgbug<-bugreports(fvector)[1]\n      }\n      else\n      {\n        pkgbug<-c(\"NULL\")\n      }\n      #17 biocviews\n      pkgbiocviews<-NULL\n      if(length(biocviews(fvector))>0)\n      {\n        pkgbiocviews<-biocviews(fvector)[1]\n      }\n      else\n      {\n        pkgbiocviews<-c(\"NULL\")\n      }\n      #18 bundledes\n      pkgbundledes<-NULL\n      if(length(bundledes(fvector))>0)\n      {\n        pkgbundledes<-bundledes(fvector)[1]\n      }\n      else\n      {\n        pkgbundledes<-c(\"NULL\")\n      }\n      #19 collate\n      pkgcollate<-NULL\n      if(length(collate(fvector))>0)\n      {\n        pkgcollate<-collate(fvector)[1]\n      }\n      else\n      {\n        pkgcollate<-c(\"NULL\")\n      }\n      #20 collate.windows\n      pkgcollate.windows<-NULL\n      if(length(collate.windows(fvector))>0)\n      {\n        pkgcollate.windows<-collate.windows(fvector)[1]\n      }\n      else\n      {\n        pkgcollate.windows<-c(\"NULL\")\n      }\n      #21 collate.unix\n      pkgcollate.unix<-NULL\n      if(length(collate.unix(fvector))>0)\n      {\n        pkgcollate.unix<-collate.unix(fvector)[1]\n      }\n      else\n      {\n        pkgcollate.unix<-c(\"NULL\")\n      }\n      \n      #22 keepsrc\n      pkgkeepsrc<-NULL\n      if(length(keepsrc(fvector))>0)\n      {\n        pkgkeepsrc<-keepsrc(fvector)[1]\n      }\n      else\n      {\n        pkgkeepsrc<-c(\"NULL\")\n      }\n      \n      #23 lazydata\n      pkglazydata<-NULL\n      if(length(lazydata(fvector))>0)\n      {\n        pkglazydata<-lazydata(fvector)[1]\n      }\n      else\n      {\n        pkglazydata<-c(\"NULL\")\n      }\n      #24 lazyload\n      pkglazload<-NULL\n      if(length(lazyload(fvector))>0)\n      {\n        pkglazload<-lazyload(fvector)[1]\n      }\n      else\n      {\n        pkglazload<-c(\"NULL\")\n      }\n      #25 bytecompile\n      pkgbytecompile<-NULL\n      if(length(bytecompile(fvector))>0)\n      {\n        pkgbytecompile<-bytecompile(fvector)[1]\n      }\n      else\n      {\n        pkgbytecompile<-c(\"NULL\")\n      }\n      #26 zipdata\n      pkgzipdata<-NULL\n      if(length(zipdata(fvector))>0)\n      {\n        pkgzipdata<-zipdata(fvector)[1]\n      }\n      else\n      {\n        pkgzipdata<-c(\"NULL\")\n      }\n      #27 biarch\n      pkgbiarch<-NULL\n      if(length(biarch(fvector))>0)\n      {\n        pkgbiarch<-biarch(fvector)[1]\n      }\n      else\n      {\n        pkgbiarch<-c(\"NULL\")\n      }\n      #28 buildvignettes\n      pkgbuildvig<-NULL\n      if(length(buildvig(fvector))>0)\n      {\n        pkgbuildvig<-buildvig(fvector)[1]\n      }\n      else\n      {\n        pkgbuildvig<-c(\"NULL\")\n      }\n      #29 vignettebuilder\n      pkgvigbuild<-NULL\n      if(length(vigbuilder(fvector))>0)\n      {\n        pkgvigbuild<-vigbuilder(fvector)[1]\n      }\n      else\n      {\n        pkgvigbuild<-c(\"NULL\")\n      }\n      #30 needscompilation\n      pkgneedcompile<-NULL\n      if(length(needcompile(fvector))>0)\n      {\n        pkgneedcompile<-needcompile(fvector)[1]\n      }\n      else\n      {\n        pkgneedcompile<-c(\"NULL\")\n      }\n      #31 os\n      pkgos<-NULL\n      if(length(os(fvector))>0)\n      {\n        pkgos<-os(fvector)[1]\n      }\n      else\n      {\n        pkgos<-c(\"NULL\")\n      }\n      #32 ACM\n      pkgacm<-NULL\n      if(length(acm(fvector))>0)\n      {\n        pkgacm<-acm(fvector)[1]\n      }\n      else\n      {\n        pkgacm<-c(\"NULL\")\n      }\n      #33 JEL\n      pkgjel<-NULL\n      if(length(jel(fvector))>0)\n      {\n        pkgjel<-jel(fvector)[1]\n      }\n      else\n      {\n        pkgjel<-c(\"NULL\")\n      }\n      #34 MSC\n      pkgmsc<-NULL\n      if(length(msc(fvector))>0)\n      {\n        pkgmsc<-msc(fvector)[1]\n      }\n      else\n      {\n        pkgmsc<-c(\"NULL\")\n      }\n      #35 language\n      pkglng<-NULL\n      if(length(lng(fvector))>0)\n      {\n        pkglng<-lng(fvector)[1]\n      }\n      else\n      {\n        pkglng<-c(\"NULL\")\n      }\n      #36 built\n      pkgbuilt<-NULL\n      if(length(built(fvector))>0)\n      {\n        pkgbuilt<-built(fvector)[1]\n      }\n      else\n      {\n        pkgbuilt<-c(\"NULL\")\n      }\n      #37 note\n      pkgnote<-NULL\n      if(length(note(fvector))>0)\n      {\n        pkgnote<-note(fvector)[1]\n      }\n      else\n      {\n        pkgnote<-c(\"NULL\")\n      }\n      #38 contact\n      pkgcontact<-NULL\n      if(length(contact(fvector))>0)\n      {\n        pkgcontact<-contact(fvector)[1]\n      }\n      else\n      {\n        pkgcontact<-c(\"NULL\")\n      }\n      #39 mailinglist\n      pkgmlst<-NULL\n      if(length(mailinglst(fvector))>0)\n      {\n        pkgmlst<-mailinglst(fvector)[1]\n      }\n      else\n      {\n        pkgmlst<-c(\"NULL\")\n      }\n      #40 repo\n      pkgrepo<-NULL\n      if(length(repo(fvector))>0)\n      {\n        pkgrepo<-repo(fvector)[1]\n      }\n      else\n      {\n        pkgrepo<-c(\"NULL\")\n      }\n      #41 publication\n      pkgpublication<-NULL\n      if(length(datepub(fvector))>0)\n      {\n        pkgpublication<-datepub(fvector)[1]\n      }\n      else\n      {\n        pkgpublication<-c(\"NULL\")\n      }\n      #42 architecture\n      pkgarchitecture<-NULL\n      if(length(arch(fvector))>0)\n      {\n        pkgarchitecture<-arch(fvector)[1]\n      }\n      else\n      {\n        pkgarchitecture<-c(\"NULL\")\n      }\n      #43 contains\n      pkgcontains<-NULL\n      if(length(contains(fvector))>0)\n      {\n        pkgcontains<-contains(fvector)[1]\n      }\n      else\n      {\n        pkgcontains<-c(\"NULL\")\n      }\n      #44 type\n      pkgtype<-NULL\n      if(length(typepkg(fvector))>0)\n      {\n        pkgtype<-typepkg(fvector)[1]\n      }\n      else\n      {\n        pkgtype<-c(\"NULL\")\n      }\n      #dataframe\n      dta<-data.frame(pkgid,pkgnameid,pkgpriority,pkgversion,pkgdate,pkgtitle,pkgauthor,pkgmaintainer,pkgdescription,pkglicense,pkgurl,pkgpackaged,pkgar,pkgencoding,pkgcopyright,pkgsysreq,pkgrevision,pkgbug,pkgbiocviews,pkgbundledes,pkgcollate,pkgcollate.windows,pkgcollate.unix,pkgkeepsrc,pkglazydata,pkglazload,pkgbytecompile,pkgzipdata,pkgbiarch,pkgbuildvig,pkgvigbuild,pkgneedcompile,pkgos,pkgacm,pkgjel,pkgmsc,pkglng,pkgbuilt,pkgnote,pkgcontact,pkgmlst,pkgrepo,pkgpublication,pkgarchitecture,pkgcontains,pkgtype,stringsAsFactors=F)\n      dta<-data.frame(pkgid,pkgnameid,pkgpriority,pkgversion,pkgdate,pkgtitle,pkgauthor,pkgmaintainer,pkgdescription,pkglicense,stringsAsFactors=F)\n      dta2<-data.frame(pkgid,pkgurl,pkgpackaged,pkgar,pkgencoding,pkgcopyright,pkgsysreq,pkgrevision,pkgbug,pkgbiocviews,stringsAsFactors=F)\n      dta3<-data.frame(pkgid,pkgbundledes,pkgcollate,pkgcollate.windows,pkgcollate.unix,pkgkeepsrc,pkglazydata,pkglazload,pkgbytecompile,pkgzipdata,stringsAsFactors=F)\n      dta4<-data.frame(pkgid,pkgbiarch,pkgbuildvig,pkgvigbuild,pkgneedcompile,pkgos,pkgacm,pkgjel,pkgmsc,pkglng,stringsAsFactors=F)\n      dta5<-data.frame(pkgid,pkgbuilt,pkgnote,pkgcontact,pkgmlst,pkgrepo,pkgpublication,pkgarchitecture,pkgcontains,pkgtype,stringsAsFactors=F)\n      names(dta)<-name[1:10]\n      names(dta2)<-c(name[1],name[11:19])\n      names(dta3)<-c(name[1],name[20:28])\n      names(dta4)<-c(name[1],name[29:37])\n      names(dta5)<-c(name[1],name[38:46])\n      fileconn<-file(\".//data//pkgid.txt\")  # writing pkgid to text file\n     writeLines(as.character(pkgid),fileconn)\n      close(fileconn)\n      #appending to package \n     try(test<-sqlSave(channel,dta,tablename='package',append=T,rownames=F,colnames=F,fast=F))\n      if(test==1)  #for checking if the above operation succeeded or no\n    {  #appending to package 2\n      try(sqlSave(channel,dta2,tablename='package2',append=T,rownames=F,colnames=F,fast=F))\n      \n      try(sqlSave(channel,dta3,tablename='package3',append=T,rownames=F,colnames=F,fast=F))\n      \n      #appending to package 4\n      try(sqlSave(channel,dta4,tablename='package4',append=T,rownames=F,colnames=F,fast=F))\n      \n      #appending to package 5\n      try(sqlSave(channel,dta5,tablename='package5',append=T,rownames=F,colnames=F,fast=F))\n    \n      #appending to depends\n      dframedepends(fvector,pkgid)\n      #appending to suggests\n      dframesuggests(fvector,pkgid)\n      #appending to enchances\n      dframeenhances(fvector,pkgid)\n      }\n    }\n    \n  }\n  closedb()\n  \n}\n# Depends Table\ndframedepends<-function(fvector,pkgid)\n{\n  pkg<-NULL\n  temp<-dependency(fvector)\n  if(length(temp)>0)\n  {\n    for(i in 1:length(temp))\n    {\n      pkg[i]<-pkgid\n    }\n    dta<-data.frame(pkg,temp)\n    names(dta)<-c(\"pkgid\",\"name\")\n    channel<-intdb()\n   try(sqlSave(channel,dta,tablename='depends',append=T,rownames=F,colnames=F))\n    closedb()\n  }\n}\n#Suggests Table\ndframesuggests<-function(fvector,pkgid)\n{\n  pkg<-NULL\n  temp<-suggests(fvector)\n  if(length(temp)>0)\n  {\n    for(i in 1:length(temp))\n    {\n      pkg[i]<-pkgid\n    }\n    dta<-data.frame(pkg,temp)\n    names(dta)<-c(\"pkgid\",\"name\")\n    channel<-intdb()\n    try(sqlSave(channel,dta,tablename='suggests',append=T,rownames=F,colnames=F))\n    closedb()\n  }\n}\n#Enchances Table\ndframeenhances<-function(fvector,pkgid,ofuncallees)\n{\n  pkg<-NULL\n  temp<-enhances(fvector)\n  if(length(temp)>0)\n  {\n    for(i in 1:length(temp))\n    {\n      pkg[i]<-pkgid\n    }\n    dta<-data.frame(pkg,temp)\n    names(dta)<-c(\"pkgid\",\"name\")\n    channel<-intdb()\n    try(sqlSave(channel,dta,tablename='enhances',append=T,rownames=F,colnames=F))\n    closedb()\n  }\n}\ndframefunction<-function(originalfunlst,finalfunlst,ofuncallees)\n{  \n  channel<-intdb()\n  temp<-sqlFetch(channel,'function',colnames=F,rownames=F)[,1]\n  pkgid<-readLines(\".//data//pkgid.txt\")\n  if(length(pkgid)>0)\n  {\n    if(length(originalfunlst)>0)\n    {\n      idfunction<-c(1)\n      if(length(temp)>0)\n      {\n        idfunction<-c((max(temp)+1))\n      }\n      functionid<-NULL\n      #for filling function table\n      for(fun in originalfunlst)\n      {\n        fname<-fun\n        generic<-any(grepl(\"UseMethod\\\\(\", deparse(fun)))\n        name<-c(\"idfunction\",\"fname\",\"generic\",\"pkgid\")\n        dta<-data.frame(idfunction,fun,generic,pkgid,stringsAsFactors=F)\n        names(dta)<-name\n        try(sqlSave(channel,dta,tablename='function',append=T,rownames=F,colnames=F,fast=F))\n        functionid<-c(functionid,idfunction)\n        idfunction<-c(idfunction+1)\n       # print(finalfunlst)\n        #print(idfunction)\n      }\n      closedb()\n      #for filling internal function table\n     for(i in 1:length(originalfunlst))\n     {\n       funid<-functionid[i]\n      temp<-ofuncallees[[i]]\n       if(length(temp)>1)\n       {\n         for(i in 2:length(temp))\n         {\n           tmatch<-match(temp[i],originalfunlst,nomatch=-1)\n           if(tmatch!=-1)\n           {\n             callees<-functionid[tmatch]\n             dframeinternalfun(funid,callees)\n             }\n         }\n       }\n     }\n      #for filling external function table\n      for(i in 1:length(originalfunlst))\n      {\n        funid<-functionid[i]\n        temp<-ofuncallees[[i]]\n        if(length(temp)>1)\n        {\n          extfun<-setdiff(temp[2:length(temp)],originalfunlst)\n         if(length(extfun)>0)\n         {\n           for(fun in extfun)\n           {\n             if(length(finalfunlst)>0)\n             {\n               for(j in 1:length(finalfunlst))\n               {\n                 tfinal<-finalfunlst[[j]]\n                 if(length(tfinal)>1)\n                 {\n                   tm<-match(fun,tfinal[2:length(tfinal)],nomatch=-1)\n                   if(tm!=-1)\n                   {\n                     dframeexternalfun(funid,fun,tfinal[1])\n                     break\n                   }\n                 }\n               }\n             }\n           }\n         }\n        }\n      }\n    } \n  }\n \n}\ndframeinternalfun<-function(funid,callees)\n{\n  channel<-intdb()\n  data<-data.frame(funid,callees,stringsAsFactors=F)\n  names(data)<-c(\"idinternalfun\",\"callees\")\n  try(sqlSave(channel,data,tablename='internalfun',append=T,colnames=F,rownames=F))\n  closedb()\n}\ndframeexternalfun<-function(funid,fun,pkgname)\n{\n  data<-data.frame(funid,fun,pkgname,stringsAsFactors=F)\n  names(data)<-c(\"idextfun\",\"extfun\",\"pkgname\")\n  channel<-intdb()\n  try(sqlSave(channel,data,tablename='externalfun',append=T,colnames=F,rownames=F,fast=F))\n  closedb()\n}",
    "created" : 1371811770907.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "8|3|14|3|\n47|1|553|0|\n574|1|589|0|\n592|1|607|0|\n",
    "hash" : "2890880228",
    "id" : "68DA6D1",
    "lastKnownWriteTime" : 1374567911,
    "path" : "E:/R/Pkg_mdt_extractor/R/Database.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : true,
    "type" : "r_source"
}