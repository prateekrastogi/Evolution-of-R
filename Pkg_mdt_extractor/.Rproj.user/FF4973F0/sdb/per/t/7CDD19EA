{
    "contents" : "# for the analysis of the package\npkganalysis <- function(){\n  lst<- readLines(\".//data//wpkg.txt\")\n  bpath<-readLines(\".//data//srcdir.txt\")\n  pkgverify(lst,bpath)\n}\n# verify if the tar or zip is indeed a package or not\npkgverify <- function(lst,bpath)\n{\nwpkg<-lst #to be used by the our loop to come to this point again to check if some new sources are added after pending work is completed.\n  tarlst <- grep(\"tar|tgz\",lst)  #separate tar\n  ziplst <- grep(\"zip\",lst)     #separate list  \n  if(length(tarlst>=1))\n{  for(t in tarlst[1:length(tarlst)])              #verify if tar contains package and if has pkg then pass\n                                  #the package tar to pkgexplore()\n  {\n    \n   \n    initpath<-lst[t]\n    path<-file.path(bpath,initpath)\n    oup<-try(untar(path,list=T))\n    temp1<-oup[grep(\"\\\\/R\\\\/\",oup)]\n    temp2<-oup[grep(\"\\\\/man\\\\/\",oup)]\n    temp3<-grep(\"DESCRIPTION\",oup)\n    des<-oup[temp3]\n    ext<-file.path(getwd(),'data/temp')\n   if(length(temp1) >=1 && (length(temp2))>=1 && (length(des))==1)# if tar contains man,des, and R \n     {\n     print(path)\n     ofileconn<-file(\".//data//opkgpath.txt\")        #preserving the path of the original package package\n     writeLines(path,ofileconn)            \n     close(ofileconn)\n       try( untar(path,exdir= ext))\n        fldpath<-file.path(ext,dir(ext,recursive=F))\n     ofileconn<-file(\".//data//opkgtemppath.txt\")        #preserving the path of the original package package\n     writeLines(fldpath,ofileconn) \n     close(ofileconn) \n     # print(\"Analyzing a new package...\" )\n      \n        pkgexplore(fldpath)\n       # print(\"Finished analysis of the previous package\")\n   \n    unlink(file.path(fldpath),recursive=T)\n   }\n     else if(length(temp1) >=1 && (length(temp2))>=1 && (length(des))>1)#for tar inside tar\n    {\n      print(path)\n      try(untar(path,exdir= ext))\n      fldpath<-file.path(ext,dir(ext,recursive=F))\n     lstc<-dir(fldpath,recursive=F)\n      for(fld in lstc[1:length(lstc)])\n      {\n        temppath<-file.path(fldpath,fld)\n        info<-(file.info(temppath)$isdir)\n        info<-info[!is.na(info)]\n       if(length(info)>0)\n      {  if(info)\n        {\n          \n        #  print(\"Analyzing a new package... \")\n          \n         pkgexplore(temppath) \n        unlink(file.path(temppath),recursive=T)\n         unlink(file.path(getwd(),'data/temp'),recursive=T)\n        #  print(\"Finished analysis of the previous package\")\n        }}\n      }\n    }   \n    #for removing items that are proccessed from the wpkg vector\n    wpkg<-setdiff(wpkg,lst[t]) #separating from original function list so that next time \n    if(length(wpkg)==0)\n    {\n      wfileconn <- file(\".//data//wpkg.txt\")\n      writeLines(wpkg,wfileconn)\n      close(wfileconn)\n      ofileconn<-file(\".//data//opkg.txt\")\n      oldlst <-readLines(ofileconn)\n      oldlst<-c(oldlst,lst[t])\n      writeLines(oldlst,ofileconn)\n      close(ofileconn)\n      tarloc()\n    }\n    #updating the wpkg file\n    else{\n      wfileconn <- file(\".//data//wpkg.txt\")\n      writeLines(wpkg,wfileconn)\n      close(wfileconn)\n      ofileconn<-file(\".//data//opkg.txt\")\n      oldlst <-readLines(ofileconn)\n      oldlst<-c(oldlst,lst[t])\n      writeLines(oldlst,ofileconn)\n      close(ofileconn)\n    }\n    \n}}\n  if(length(ziplst>=1))\n{  for(t in ziplst[1:length(ziplst)])                  #same for zip\n  {\n    initpath<-lst[t]\n    path<-file.path(bpath,initpath)\n    oup<-try(unzip(path,list=T))\n    temp1<-oup[grep(\"\\\\/R\\\\/\",oup)]\n    temp2<-oup[grep(\"\\\\/man\\\\/\",oup)]\n    temp3<-grep(\"DESCRIPTION\",oup)\n    des<-oup[temp3]\n    ext<-file.path(getwd(),'data/temp')\n    if(length(temp1) >=1 && (length(temp2))>=1 && (length(des))==1) #if zip contains des,man, and r\n    {print(path)\n      try(unzip(path,exdir= ext))\n      fldpath<-file.path(ext,dir(ext,recursive=F))\n     # print(\"Analyzing a new package... \")\n      pkgexplore(fldpath)\n     # print(\"Finished analysis of the previous package.\")\n      unlink(file.path(fldpath),recursive=T)\n    }\n    else if(length(temp1) >=1 && (length(temp2))>=1 && (length(des))>1) #for pkg inside zip\n    {print(path)\n      try(unzip(path,exdir= ext))\n      fldpath<-file.path(ext,dir(ext,recursive=F))\n      lstc<-dir(fldpath,recursive=F)\n      for(fld in lstc[1:length(lstc)])\n      {\n        temppath<-file.path(fldpath,fld)\n        info<-(file.info(temppath)$isdir)\n        info<-info[!is.na(info)]\n        if(length(info)>0)\n       { if(info)\n        {\n          #print(\"Analyzing a new package... \")\n          pkgexplore(temppath) \n        \n        #  print(\"Finished analysis of the previous package\")\n          unlink(file.path(temppath),recursive=T)\n        }}\n      }\n    }\n    #for removing items that are proccessed from the wpkg vector\n    wpkg<-setdiff(wpkg,lst[t]) #separating from original function list so that next time \n    if(length(wpkg)==0)\n{\n      wfileconn <- file(\".//data//wpkg.txt\")\n      writeLines(wpkg,wfileconn)\n      close(wfileconn)\n      ofileconn<-file(\".//data//opkg.txt\")\n      oldlst <-readLines(ofileconn)\n      oldlst<-c(oldlst,lst[t])\n      writeLines(oldlst,ofileconn)\n      close(ofileconn)\n      tarloc()\n    }\n    #updating the wpkg file\n    else{  \n      wfileconn <- file(\".//data//wpkg.txt\")\n      writeLines(wpkg,wfileconn)\n      close(wfileconn)\n      ofileconn<-file(\".//data//opkg.txt\")\n      oldlst <-readLines(ofileconn)\n      oldlst<-c(oldlst,lst[t])\n      writeLines(oldlst,ofileconn)\n      close(ofileconn)\n    }\n   \n}}\n  \n}\n",
    "created" : 1369995634472.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1146922177",
    "id" : "7CDD19EA",
    "lastKnownWriteTime" : 1374567907,
    "path" : "E:/R/Pkg_mdt_extractor/R/PkgExtraction.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : true,
    "type" : "r_source"
}