{
    "contents" : "start<-function()\n{\n  library(RODBC)\n  srcloc()\n  consume()\n}\n# To obtain the path of the source directory.\nsrcloc<-function(){\n  if(length(scan(\".//data//srcdir.txt\",what=\"\"))==0){\n    path <- readline(\"Please enter the R source directory filepath: \")\n    fileConn<-file(\".//data//srcdir.txt\")\n    writeLines(path, fileConn)\n    close(fileConn)\n  }\n  else {\n    x<-readline(\"Do you want to use the stored path?(y/n) \")\n    if(x=='y')\n    {path<-readLines(\".//data//srcdir.txt\")}\n    else{\n      path <- readline(\"Please enter the R source directory filepath: \")\n      fileConn<-file(\".//data//srcdir.txt\")\n      writeLines(path, fileConn)\n      close(fileConn) \n    }\n  }\n  repeat\n  {\n    path<- toString.default(readLines(\".//data//srcdir.txt\"))\n    temp <-file.info(path)$isdir\n    temp <- temp[!is.na(temp)]\n    if((length(temp)==0) || (temp ==F)){\n      path <-readline(\"You have entered the wrong directory path. Please enter the correct path: \")\n      fileConn<-file(\".//data//srcdir.txt\")\n      writeLines(path, fileConn)\n      close(fileConn)}\n    else{break   \n    }\n  }\n}\nconsume<- function()\n{\n  path<- readLines(\".//data//srcdir.txt\")\n  winlst<- list.files(path, pattern=\"Windows\" , recursive =T)\n  macxlst<- list.files(path, pattern=\"Macx\" , recursive =T)\n  rversion<-NULL\n  os<-NULL\n  dpath<-NULL\n for(t in winlst)\n {\n   counter<-1\n   tempos<-c(\"Windows\")\n   temprversion<-gsub(\"Windows|PACKAGES|\\\\+|\\\\.htm|\\\\.html\",\"\",t)\n   temp<-readLines((file.path(path,t)))\n   if(length(temp)>0)\n   {\n    \n   for(i in (1:length(temp)))\n   {\n     if(temp[i]==\"\")\n     {\n       if(i!=1)\n       {\n         os<-c(os,tempos)\n         rversion<-c(rversion,temprversion)\n         dpath<-c(dpath,paste(temp[counter:(i-1)],collapse=\"+++\"))\n         counter<-(i+1)\n       }\n     }\n   }\n }}\n  for(t in macxlst)\n  {\n    counter<-1\n    tempos<-c(\"MacOsx\")\n    temprversion<-gsub(\"Macx|PACKAGES|\\\\+|\\\\.htm|\\\\.html\",\"\",t)\n    temp<-readLines((file.path(path,t)))\n    if(length(temp)>0)\n    {\n      \n      for(i in (1:length(temp)))\n      {\n        if(temp[i]==\"\")      # separating each package description by blank lines.\n        {\n          if(i!=1)\n          {\n            os<-c(os,tempos)\n            rversion<-c(rversion,temprversion)\n            dpath<-c(dpath,paste(temp[counter:(i-1)],collapse=\"+++\"))\n            counter<-(i+1)\n          }\n        }\n      }\n    }}\n  despath<-NULL\n  if(length(dpath)>0)\n  {  for(t in 1:length(dpath))\n  {                                               # convert in the form for which processing is easy  \n    despath<-unlist(strsplit(dpath[t],split=\"\\\\+\\\\+\\\\+\"))\n    desexplore(despath,rversion[t],os[t])  # passing description of a package to its explorer\n  }}\n}\n# our function that is supposed to explore description given\ndesexplore <-function(despath,rversion,os)\n{\n  fvector<-finalvector(despath)\n  dframe(fvector,rversion,os)\n}\n# final vector consisiting of all the information about a particular package\nfinalvector<-function(dpath)\n{\n  \n  fvector<-NULL #for separating each specific fields of the description file and storing it in a separate index\n  temp <- (grep(\"Package:|Priority:|Version:|Date:|Title:|Author:|Maintainer:|Depends:|Description:|License:|URL:|Packaged:|Authors@R:|Encoding:|Copyright:|SystemRequirements:|Imports:|Suggests:|Enhances:|Revision:|BugReports:|biocViews:|BundleDescription:|Collate\\\\.unix:|Collate\\\\.windows:|Collate:|KeepSource:|LazyData:|LazyLoad:|ByteCompile:|ZipData:|Biarch:|BuildVignettes:|VignetteBuilder:|NeedsCompilation:|OS_type:|Classification\\\\/ACM:|Classification\\\\/JEL:|Classification\\\\/MSC:|Language:|Built:|Note:|Contact:|MailingList:|Repository:|Date\\\\/Publication:|Architecture:|Archs:|Requires:|Contains:|Type:\",dpath))  \n  if(length(temp)>=1)\n  {\n    if(length(temp>1))\n    {      for(i in 1:(length(temp)-1))\n    {\n      fvector<-c(fvector,(paste(dpath[temp[i]:((temp[i+1])-1)],collapse=\"\")))   #for collating description        \n    }\n    }\n    #for collating last line of the description\n    fvector<-c(fvector,(paste(dpath[temp[length(temp)]:length(dpath)],collapse=\"\")))}\n}\n#To extract the package information\npackage<- function(fvector)\n{\n  depends<-fvector[grep(\"Package:\",fvector)]\n  if(length(depends)>=1)\n  {\n    temp<-gsub(\"Package:|\\\\s\",\"\",depends)\n    \n    if(length(temp >=1) && temp[1] !=\"\")\n    {fd<-(temp)\n    }\n  }}\n# To extract the version information\nversion<- function(fvector)\n{\n  depends<-fvector[grep(\"Version:\",fvector)]\n  if(length(depends)>=1)\n  {\n    temp<-gsub(\"Version:|\\\\s\",\"\",depends)\n    \n    if(length(temp >=1) && temp[1] !=\"\")\n    {fd<-temp\n    }\n  }\n}\n",
    "created" : 1370938847255.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "1|1|5|0|\n7|19|38|0|\n40|1|100|0|\n103|1|106|0|\n109|1|123|0|\n126|1|135|3|\n138|1|148|0|\n",
    "hash" : "301217131",
    "id" : "6A789B21",
    "lastKnownWriteTime" : 1373901374,
    "path" : "E:/R/Snapshot/R/Snapshot.R",
    "properties" : {
    },
    "source_on_save" : true,
    "type" : "r_source"
}